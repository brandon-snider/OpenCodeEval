{"task_id": 0, "completion_id": 0, "solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if numbers[i] < threshold:\n            if numbers[i] < threshold:\n                result.append(numbers[i])\n                return False\n            return False\n        return True\n    return False"}
{"task_id": 1, "completion_id": 0, "solution": "from typing import List\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            result.append(i)\n    return result"}
{"task_id": 2, "completion_id": 0, "solution": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    result = 0\n    for i in range(1, int(number)):\n        if number % i == 0:\n            if number % i == 0:\n                result += 1\n    return result"}
{"task_id": 3, "completion_id": 0, "solution": "from typing import List\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    (left, right) = (0, len(operations) - 1)\n    (left, right) = (0, len(operations) - 1)\n    while left < right:\n        if operations[left] == 0:\n            left += 1\n        elif operations[left] == 0:\n            right -= 1\n        else:\n            left += 1\n    if operations[right] == 0:\n        return True\n    else:\n        return False"}
{"task_id": 4, "completion_id": 0, "solution": "from typing import List"}
{"task_id": 5, "completion_id": 0, "solution": "from typing import List\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    result = []\n    for i in range(len(nums)):\n        if nums[i] == delimeter:\n            result.append(i)\n    return result"}
{"task_id": 6, "completion_id": 0, "solution": "from typing import List\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    result.append(pren_string)\n    result = []\n    for char in paren_string:\n        if char == '(':\n            result.append(char)\n        else:\n            result.append(char)\n    return result"}
{"task_id": 7, "completion_id": 0, "solution": "from typing import List\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    result = []\n    for i in range(len(strings)):\n        if len(strings[i]) > len(result):\n            result.append(string(i))\n    return result"}
{"task_id": 8, "completion_id": 0, "solution": "from typing import List, Tuple"}
{"task_id": 9, "completion_id": 0, "solution": ""}
{"task_id": 10, "completion_id": 0, "solution": ""}
{"task_id": 11, "completion_id": 0, "solution": "from typing import List\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        if i == 0:\n            result += str(i)\n        else:\n            result += str(i)\n    return result"}
{"task_id": 12, "completion_id": 0, "solution": ""}
{"task_id": 13, "completion_id": 0, "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if a < 2 or b < 2 or a > 2:\n        return 0\n    longest_divisor = 0\n    while longest_divisor < 2:\n        if longest_divisor < 2:\n            longest_divisor = 1\n            if longest_divisor < 2:\n                longest_divisor = 1\n            if longest_divisor < 2:\n                longest_divisor = 1\n            if longest_divisor < 2:\n                longest_divisor = 1\n            if longest_divisor < 2:\n                longest_divisor = 1\n            if longest_divisor < 2:\n                longest_divisor = 1\n            if longest_divisor < 2:\n                longest_divisor = 1\n            if longest_divisor < 2:\n                longest_divisor = 1\n            if longest_divisor < 2:\n                longest_divisor = 1\n            if longest_divisor < 2:\n                longest_divisor = 1\n            if longest_divisor < 2:\n                longest_divisor = 1\n            if longest_divisor < 2:\n                longest_divisor = 1\n            if longest_divisor < 2:\n                longest_divisor = 1\n            if longest_divisor < 2:\n                longest_divisor = 1\n            if longest_divisor < 2:\n                longest_divisor = 1\n            if longest_divisor > 2:\n                longest_divisor = 1\n            if longest_divisor < 2:\n                longest_divisor = 1\n            if longest_divisor < 2:\n                longest_divisor = 1\n            if longest_divisor > 2:\n                longest_divisor = 1\n            if longest_divisor < 2:\n                longest_divisor = 1"}
{"task_id": 14, "completion_id": 0, "solution": "from typing import List\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefix_list = []\n    for prefix in string:\n        if prefix_list.is_empty():\n            prefix_list.append(prefix)\n    return prefix_list"}
{"task_id": 15, "completion_id": 0, "solution": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    sequence = []\n    for i in range(1, n):\n        if i == 0:\n            sequence.append(i)\n    for i in range(1, n):\n        if i == 0:\n            sequence.append(i)\n    return sequence"}
{"task_id": 16, "completion_id": 0, "solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    count = 0\n    for char in string:\n        if char in count:\n            count += 1\n        else:\n            count += 1\n    return count"}
{"task_id": 17, "completion_id": 0, "solution": "from typing import List\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    result = []\n    for i in range(len(music_string)):\n        if i == len(music_string):\n            count += 1\n        else:\n            count += 1\n    return result"}
{"task_id": 18, "completion_id": 0, "solution": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        if string[i] == substring[i - 1]:\n            count += 1\n        else:\n            count += 1\n    return count"}
{"task_id": 19, "completion_id": 0, "solution": "from typing import List"}
{"task_id": 20, "completion_id": 0, "solution": "from typing import List, Tuple"}
{"task_id": 21, "completion_id": 0, "solution": "from typing import List\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    result = []\n    for num in numbers:\n        if num == 0:\n            result.append(num)\n        else:\n            result.append(num)\n    return result"}
{"task_id": 22, "completion_id": 0, "solution": ""}
{"task_id": 23, "completion_id": 0, "solution": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    (left, right) = (0, len(string) - 1)\n    while left < right:\n        if string[left] == string[right]:\n            left += 1\n        else:\n            right -= 1\n    return len(string)"}
{"task_id": 24, "completion_id": 0, "solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    largest_divisor = 0\n    while n > 0:\n        largest_divisor = max(largest_divisor, largest_divisor)\n        if largest_divisor > largest_divisor:\n            largest_divisor = largest_divisor\n        if largest_divisor > largest_divisor:\n            largest_divisor = largest_divisor\n        else:\n            largest_divisor = largest_divisor\n    return largest_divisor"}
{"task_id": 25, "completion_id": 0, "solution": "from typing import List"}
{"task_id": 26, "completion_id": 0, "solution": "from typing import List\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    left = 0\n    right = len(numbers) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if numbers[mid] < numbers[right]:\n            left += 1\n        else:\n            right -= 1\n    return [left, right]"}
{"task_id": 27, "completion_id": 0, "solution": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    result = ''\n    for char in string:\n        if char == ' ':\n            result += char\n        else:\n            result += char\n    return result"}
{"task_id": 28, "completion_id": 0, "solution": "from typing import List\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    result = []\n    for i in range(len(strings)):\n        if strings[i] == '':\n            result.append(strings[i])\n    return result"}
{"task_id": 29, "completion_id": 0, "solution": "from typing import List\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    result = []\n    for i in range(len(strings)):\n        if strings[i] == prefix:\n            result.append(string)\n    return result"}
{"task_id": 30, "completion_id": 0, "solution": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    result = []\n    result = 0\n    for i in range(len(l)):\n        if l[i] < result:\n            result.append(i)\n        else:\n            result.append(i)\n    return result"}
{"task_id": 31, "completion_id": 0, "solution": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 2:\n        return False\n    if n % 2 == 0:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return True"}
{"task_id": 32, "completion_id": 0, "solution": "import math\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    result = []\n    for i in range(len(xs)):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}
{"task_id": 33, "completion_id": 0, "solution": ""}
{"task_id": 34, "completion_id": 0, "solution": ""}
{"task_id": 35, "completion_id": 0, "solution": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    l = 0\n    r = len(l) - 1\n    while l < r:\n        mid = (l + r) // 2\n        if l < mid:\n            l += 1\n        else:\n            l += 1\n    return l"}
{"task_id": 36, "completion_id": 0, "solution": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    digit = 0\n    while n > 0:\n        digit = n % 11\n        if digit % 11 == 0:\n            digit = digit\n        elif digit % 11 == 0:\n            digit = digit\n        else:\n            digit = digit\n    return digit"}
{"task_id": 37, "completion_id": 0, "solution": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    result = []\n    for i in range(len(l)):\n        if l[i] == l[i - 1]:\n            result.append(i)\n    return result"}
{"task_id": 38, "completion_id": 0, "solution": ""}
{"task_id": 39, "completion_id": 0, "solution": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    fib = []\n    while n > 0:\n        n = n % 10\n        if n % 2 == 0:\n            fib.append(n)\n        if n % 2 == 0:\n            fib.append(fib)\n    return fib"}
{"task_id": 40, "completion_id": 0, "solution": ""}
{"task_id": 41, "completion_id": 0, "solution": ""}
{"task_id": 42, "completion_id": 0, "solution": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    result = []\n    result = []\n    for item in l:\n        result.append(item)\n        result.append(item)\n    return result"}
{"task_id": 43, "completion_id": 0, "solution": ""}
{"task_id": 44, "completion_id": 0, "solution": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if not base:\n        return '0'\n    return '0'"}
{"task_id": 45, "completion_id": 0, "solution": ""}
{"task_id": 46, "completion_id": 0, "solution": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    fib = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            fib.append(fib[i])\n    return fib"}
{"task_id": 47, "completion_id": 0, "solution": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = 0\n    l_l = len(l) - 1\n    while l < len(l):\n        if l[l[l[l[l[l[l]]]]]] == 0:\n            l += 1\n        else:\n            l += 1\n    return l"}
{"task_id": 48, "completion_id": 0, "solution": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    if not is_palindrome(str):\n        return False\n    if not is_palindrome(str):\n        return False\n    if not is_palindrome(str):\n        return False\n    if not is_palindrome(str):\n        return False\n    if not is_palindrome(str):\n        return False\n    if not is_palindrome(str):\n        return False\n    if not is_palindrome(str):\n        return False\n    if not is_palindrome(str):\n        return False\n    if not is_palindrome(str):\n        return False\n    if not is_palindrome(str):\n        return False\n    if not is_palindrome(str):\n        return False\n    if not is_palindrome(str):\n        return False\n    if not is_palindrome(str):\n        return False\n    if not is_palindrome(str):\n        return False\n    if not is_palindrome(str):\n        return False\n    if not is_palindrome(str):\n        return False\n    if not is_palindrome(str):\n        return False\n    if not is_palindrome(str):\n        return False\n    if not is_palindrome(str):\n        return False\n    if not is_palindrome(str):\n        return False\n    if not is_palindrome(str):\n        return False\n    if not is_palindrome(str):\n        return False\n    if not is_palindrome(str):\n        return False\n    if not is_palindrome(str):\n        return False\n    if not is_palindrome(str):\n        return False\n    if not is_palindrome(str):\n        return False\n    if not is_palindrome(str):\n        return False\n    if not is_palindrome(str):\n        return False"}
{"task_id": 49, "completion_id": 0, "solution": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    result = []\n    while n > 0:\n        n = n % 10\n        if n % 10 == 0:\n            result.append(n)\n        else:\n            result.append(n)\n    return result"}
{"task_id": 50, "completion_id": 0, "solution": ""}
{"task_id": 51, "completion_id": 0, "solution": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\nghijklm\")\n    'bcdf\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    if not strs:\n        return ''\n    result = ''\n    for char in strs:\n        if char in result:\n            result += char\n        else:\n            result += char\n    return result"}
{"task_id": 52, "completion_id": 0, "solution": ""}
{"task_id": 53, "completion_id": 0, "solution": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    left = 0\n    right = len(x) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if mid == left:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return [left, right]"}
{"task_id": 54, "completion_id": 0, "solution": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s1) == len(s2):\n        return True\n    if len(s1) == len(s2):\n        return False\n    if len(s1) == len(s2):\n        return True\n    if len(s1) == len(s2):\n        return False\n    if len(s1) == len(s2):\n        return False\n    if len(s1) == len(s2):\n        return True\n    if len(s1) == len(s2):\n        return False\n    if len(s1) == len(s2):\n        return False\n    if len(s1) == len(s2):\n        return True\n    if len(s1) == len(s2):\n        return False\n    if len(s1) == len(s2):\n        return True\n    if len(s1) == len(s2):\n        return False\n    if len(s1) == len(s2):\n        return True\n    if len(s1) == len(s2):\n        return False\n    if len(s1) == len(s2):\n        return True\n    if len(s1) == len(s2):\n        return False\n    if len(s1) == len(s2):\n        return True\n    if len(s1) == len(s2):\n        return False\n    if len(s1) == len(s2):\n        return True\n    if len(s1) == len(s2):\n        return False\n    if len(s1) == len(s2):\n        return True\n    if len(s1) == len(s2):\n        return False\n    if len(s1) == len(s2):\n        return True\n    if len(s1) == len(s2):\n        return False\n    if len(s1) == len(s2):\n        return True\n    if len(s1) == len(s2):\n        return False\n    if len(s1) == len(s2):\n        return True"}
{"task_id": 55, "completion_id": 0, "solution": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    fib = []\n    while n > 0:\n        n = n % 10\n        if n == 0:\n            fib.append(fib.pop())\n        fib.append(fib.pop())\n        fib.append(fib.pop())\n    return fib"}
{"task_id": 56, "completion_id": 0, "solution": ""}
{"task_id": 57, "completion_id": 0, "solution": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    count = 0\n    for i in range(len(l)):\n        if l[i] > l[i - 1]:\n            count += 1\n        else:\n            count += 1\n    return count"}
{"task_id": 58, "completion_id": 0, "solution": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    left = 0\n    right = len(l1) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if mid == 0:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": 59, "completion_id": 0, "solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    prime_factors = []\n    while n > 0:\n        if n % 2 == 0:\n            prime_factors.append(n)\n        else:\n            prime_factors.append(n)\n    return prime_factors"}
{"task_id": 60, "completion_id": 0, "solution": ""}
{"task_id": 61, "completion_id": 0, "solution": ""}
{"task_id": 62, "completion_id": 0, "solution": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n    def dfs(x, y):\n        if x == y:\n            return x\n        if y == x:\n            return y\n        if y == y:\n            return x\n        if y == x:\n            return y\n        if y == x:\n            return y\n        if x == y:\n            return x\n        if y == x:\n            return y\n        if x == y:\n            return y\n        if y == x:\n            return x\n        if y == x:\n            return y\n        if y == x:\n            return y\n        if x == y:\n            return x\n        if y == x:\n            return y\n        if x == y:\n            return y\n        if y == x:\n            return x\n        if y == x:\n            return y\n        if x == y:\n            return y\n        if y == x:\n            return y\n        if y == x:\n            return y\n        if y == x:\n            return y\n        if y == x:\n            return y\n        if y == y:\n            return y\n        if y == x:\n            return y\n        if y == x:\n            return y\n        if y == y:\n            return y\n        if y == x:\n            return y\n        if y == y:\n            return y\n        if y == x:\n            return y\n        if y == y:\n            return y\n        if y == y:\n            return y\n        if y == x:\n            return y\n        if y == x:\n            return y\n        if y == y:\n            return y\n        if y == y:\n            return y\n        if y == x:\n            return y\n        if y == x:\n            return y\n        if y == y:\n            return y\n        if y == y:\n            return y\n        if y == x:\n            return y\n        if y == y:\n            return y\n        if y == y:\n            return y\n        if y == x:\n            return y\n        if y == y:\n            return y\n        if y == y:\n            return y"}
{"task_id": 63, "completion_id": 0, "solution": ""}
{"task_id": 64, "completion_id": 0, "solution": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    count = []\n    for char in s:\n        if char in vowels_count:\n            count.append(char)\n        else:\n            count.append(char)\n    return count"}
{"task_id": 65, "completion_id": 0, "solution": ""}
{"task_id": 66, "completion_id": 0, "solution": ""}
{"task_id": 67, "completion_id": 0, "solution": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            count += 1\n        else:\n            count += 1\n    return count"}
{"task_id": 68, "completion_id": 0, "solution": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    result = []\n    for node in nodes:\n        if node.val == node.val:\n            result.append(node.val)\n        else:\n            result.append(node.val)\n    return result"}
{"task_id": 69, "completion_id": 0, "solution": "def search(lst):\n    \"\"\"\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    \"\"\"\n    left = 0\n    right = len(lst) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if lst[mid] > mid:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": 70, "completion_id": 0, "solution": "def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    \"\"\"\n    lst = sorted(lst)\n    left = 0\n    right = len(lst) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if lst[mid] < lst[mid + 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return lst"}
{"task_id": 71, "completion_id": 0, "solution": ""}
{"task_id": 72, "completion_id": 0, "solution": "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    \"\"\"\n    if not q:\n        return False\n    count = 0\n    for i in range(len(q)):\n        if q[i] == q[i - 1]:\n            count += 1\n        else:\n            count += 1\n    return count"}
{"task_id": 73, "completion_id": 0, "solution": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    min_num = 0\n    for i in range(len(arr)):\n        if arr[i] == arr[i - 1]:\n            min_num += 1\n        else:\n            min_num += 1\n    return min_num"}
{"task_id": 74, "completion_id": 0, "solution": "def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n    count = 0\n    for i in range(len(lst1)):\n        if len(lst1) == 0:\n            count += 1\n        else:\n            count += 1\n    return count"}
{"task_id": 75, "completion_id": 0, "solution": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if not is_multiply_prime(3):\n        return False\n    if not is_multiply_prime(2):\n        return False\n    if not is_multiply_prime(2):\n        return False\n    if not is_multiply_prime(2):\n        return False\n    if not is_multiply_prime(3):\n        return False\n    if not is_multiply_prime(3):\n        return True\n    if not is_multiply_prime(3):\n        return False\n    if not is_multiply_prime(3):\n        return False\n    if not is_multiply_prime(3):\n        return False\n    if not is_multiply_prime(3):\n        return True\n    if not is_multiply_prime(3):\n        return False\n    if not is_multiply_prime(3):\n        return False\n    if not is_multiply_prime(3):\n        return False\n    if not is_multiply_prime(3):\n        return True\n    if not is_multiply_prime(3):\n        return False\n    if not is_multiply_prime(3):\n        return True\n    if not is_multiply_prime(3):\n        return False\n    if not is_multiply_prime(3):\n        return False\n    if not is_multiply_prime(3):\n        return True\n    if not is_multiply_prime(3):\n        return False\n    if not is_multiply_prime(3):\n        return True\n    if not is_multiply_prime(3):\n        return False\n    if not is_multiply_prime(3):\n        return False\n    if not is_multiply_prime(3):\n        return True\n    if not is_multiply_prime(3):\n        return False\n    if not is_multiply_prime(3):\n        return True\n    if not is_multiply_prime(3):\n        return False\n    if not is_multiply_prime(3):\n        return False\n    if not is_multiply_prime(3):\n        return True\n    if not is_multiply_prime(3):\n        return False"}
{"task_id": 76, "completion_id": 0, "solution": ""}
{"task_id": 77, "completion_id": 0, "solution": "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n\n    def is_cube(a, b):\n        return False\n    '\\n    def is_cube(a, b):\\n        return False\\n    '\n\n    def is_cube(a, b):\n        return False\n    '\\n    def is_cube(a, b):\\n        return False\\n    '\n\n    def is_cube(a, b):\n        return False\n    '\\n    def is_cube(a, b):\\n        return False\\n    '\n\n    def is_cube(a, b):\n        return False\n    '\\n    def is_cube(a, b):\\n        return False\\n    '\n\n    def is_cube(a, b):\n        return False\n    '\\n    def is_cube(a, b):\\n        return False\\n    '\n\n    def is_cube(a, b):\n        return False\n    '\\n    def is_cube(a, b):\\n        return False\\n    '\n\n    def is_cube(a, b):\n        return False\n    '\\n    def is_cube(a, b):\\n        return False\\n    '\n\n    def is_cube(a, b):\n        return False\n    '\\n    def is_cube(a, b):\\n        return False\\n    '\n\n    def is_cube(a, b):\n        return False\n    '\\n    def is_cube(a, b):\\n        return False\\n    '\n\n    def is_cube(a, b):\n        return False\n    '\\n    def is_cube(a, b):\\n        return False\\n    '\n\n    def is_cube(a, b):\n        return False\n    '\\n    def is_cube(a, b):\\n        return False\\n    '\n\n    def is_cube(a, b):\n        return False\n    '\\n    def is_cube(a, b):\\n        return False\\n    '\n\n    def is_cube(a, b):\n        return False\n    '\\n    def is_cube(a, b):\\n        return False\\n    '\n\n    def is_cube(a, b):\n        return False\n    '\\n    def is_cube(a, b):\\n        return False\\n    '"}
{"task_id": 78, "completion_id": 0, "solution": ""}
{"task_id": 79, "completion_id": 0, "solution": ""}
{"task_id": 80, "completion_id": 0, "solution": ""}
{"task_id": 81, "completion_id": 0, "solution": ""}
{"task_id": 82, "completion_id": 0, "solution": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    if not is_prime:\n        return False\n    if not is_prime:\n        return True\n    if not is_prime:\n        return False\n    if not is_prime:\n        return False\n    if not is_prime:\n        return False\n    if not is_prime:\n        return False\n    if not is_prime:\n        return False\n    if not is_prime:\n        return False\n    if not is_prime:\n        return True\n    if not is_prime:\n        return False\n    if not is_prime:\n        return False\n    if not is_prime:\n        return False\n    if not is_prime:\n        return False\n    if not is_prime:\n        return True\n    if not is_prime:\n        return False\n    if not is_prime:\n        return False\n    if not is_prime:\n        return False\n    if not is_prime:\n        return False\n    if not is_prime:\n        return True\n    if not is_prime:\n        return False\n    if not is_prime:\n        return False\n    if not is_prime:\n        return False\n    if not is_prime:\n        return False\n    if not is_prime:\n        return True\n    return False"}
{"task_id": 83, "completion_id": 0, "solution": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    digit_num = 1\n    digit_num = 1\n    while n > 0:\n        digit_num += 1\n        digit_num += 1\n        digit_num += 1\n    return digit_num"}
{"task_id": 84, "completion_id": 0, "solution": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    result = 0\n    for digit in range(1, n):\n        result += digit\n        result += digit\n    return result"}
{"task_id": 85, "completion_id": 0, "solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        result.append(lst[i])\n    return result"}
{"task_id": 86, "completion_id": 0, "solution": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    result = []\n    result = []\n    for char in s:\n        if char in result:\n            result.append(char)\n        else:\n            result.append(char)\n    return result"}
{"task_id": 87, "completion_id": 0, "solution": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for row in range(len(lst)):\n        if lst[row] == lst[row]:\n            result.append(lst[row])\n    return result"}
{"task_id": 88, "completion_id": 0, "solution": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    left = 0\n    right = len(array) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if array[mid] < array[mid + 1]:\n            left = mid + 1\n        elif array[mid] < array[mid + 1]:\n            right = mid\n        else:\n            left = mid + 1\n    return [left, right]"}
{"task_id": 89, "completion_id": 0, "solution": ""}
{"task_id": 90, "completion_id": 0, "solution": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if not lst:\n        return None\n    (l1, l2) = lst.popleft()\n    (l1, l2) = lst.popleft()\n    while l1 < l2:\n        mid = (l1 + l2) // 2\n        if l1 < l2:\n            l1 += 1\n        elif l2 < l2:\n            l2 -= 1\n        elif l1 < l2:\n            l1 += 1\n        elif l1 < l2:\n            l2 += 1\n        elif l2 < l2:\n            l2 += 1\n        elif l1 < l2:\n            l2 += 1\n        elif l1 < l2:\n            l2 += 1\n        elif l2 < l2:\n            l2 += 1\n        elif l1 < l2:\n            l2 += 1\n        elif l1 < l2:\n            l1 += 1\n        elif l2 < l2:\n            l2 += 1\n        elif l1 < l2:\n            l2 += 1\n        elif l1 < l2:\n            l1 += 1\n        elif l2 < l2:\n            l2 += 1\n        elif l1 < l2:\n            l2 += 1\n        elif l1 < l2:\n            l1 += 1\n        elif l2 < l2:\n            l2 += 1\n        elif l1 < l2:\n            l1 += 1"}
{"task_id": 91, "completion_id": 0, "solution": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    goodCount = 0\n    for i in range(len(s)):\n        if s[i] in goodCount:\n            goodCount += 1\n        else:\n            goodCount += 1\n    return goodCount"}
{"task_id": 92, "completion_id": 0, "solution": ""}
{"task_id": 93, "completion_id": 0, "solution": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    result = []\n    for char in alphabet:\n        if char in result:\n            result.append(char)\n        else:\n            result.append(char)\n    return result"}
{"task_id": 94, "completion_id": 0, "solution": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    largest_prime = []\n    for i in range(len(nums)):\n        if nums[i] > largest_prime:\n            largest_prime.append(nums[i])\n    return largest_prime"}
{"task_id": 95, "completion_id": 0, "solution": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    result = []\n    for key in dict:\n        if key not in result:\n            result.append(key)\n        else:\n            result.append(key)\n    return result"}
{"task_id": 96, "completion_id": 0, "solution": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    prime_numbers = []\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            prime_numbers.append(i)\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            prime_numbers.append(i)\n    return prime_numbers"}
{"task_id": 97, "completion_id": 0, "solution": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    product = 1\n    for i in range(len(nums)):\n        product *= i\n    return product"}
{"task_id": 98, "completion_id": 0, "solution": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for char in s:\n        if char in count:\n            count += 1\n        if count > 1:\n            count += 1\n        else:\n            count += 1\n    return count"}
{"task_id": 99, "completion_id": 0, "solution": ""}
{"task_id": 100, "completion_id": 0, "solution": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    result = []\n    for stone in stones:\n        if stone in result:\n            result.append(stone)\n        else:\n            result.append(stone)\n    return result"}
{"task_id": 101, "completion_id": 0, "solution": ""}
{"task_id": 102, "completion_id": 0, "solution": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if not x or y:\n        return 0\n    if x < 0 or y < 0 or x >= len(num) or (y >= len(num)) or (num[x] != num[y]):\n        return 0\n    if x < 0 or y < 0 or x >= len(num) or (y >= len(num)):\n        return 0\n    if x < 0 or y < 0 or x >= len(num):\n        return 0\n    if x < 0 or y < 0 or x >= len(num):\n        return 0\n    if x < 0 or y < 0 or x >= len(num):\n        return 0\n    if x < 0 or y < 0 or x >= len(num):\n        return 0\n    if x < 0 or y < 0 or x >= len(num):\n        return 0\n    if x < 0 or y < 0 or x >= len(num):\n        return 0\n    if x < 0 or y < 0 or x >= len(num):\n        return 0\n    if x < 0 or y < 0 or x >= len(num):\n        return 0\n    if x < 0 or y < 0 or x >= len(num):\n        return 0\n    if x < 0 or y < 0 or x >= len(num):\n        return 0\n    if x < 0 or y < 0 or x >= len(num):\n        return 0\n    if x < 0 or y < 0 or x >= len(num):\n        return 0\n    if x < 0 or y < 0 or x >= len(num):\n        return 0\n    if x < 0 or y < 0 or x >= len(num):\n        return 0\n    if x < 0 or y < 0 or x >= len(num):\n        return 0\n    if x < 0 or y < 0 or x >= len(num):\n        return 0\n    if x < 0 or y < 0 or x >= len(num):\n        return 0\n    if x < 0 or y < 0 or x >= len(num):\n        return 0\n    if x < 0 or y < 0 or x >= len(num):\n        return 0\n    if x < 0 or y < 0 or x >= len(num):\n        return 0\n    if x < 0 or y < 0 or x >= len(num):\n        return 0\n    if x < 0 or y < 0 or x >= len(num):\n        return 0\n    if x < 0 or y < 0 or x >= len(num):\n        return 0\n    if x < 0 or y < 0 or x >= len(num):\n        return 0\n    if x < 0 or y < 0 or x >= len(num):\n        return 0\n    if x < 0 or y < 0 or x >= len(num):\n        return 0"}
{"task_id": 103, "completion_id": 0, "solution": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    result = 0\n    result = 0\n    for i in range(n):\n        result += n\n        if result == n:\n            return result\n    return result"}
{"task_id": 104, "completion_id": 0, "solution": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for num in nums:\n        if num % 2 == 0:\n            result.append(num)\n        else:\n            result.append(num)\n    return result"}
{"task_id": 105, "completion_id": 0, "solution": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    result = []\n    for i in range(len(arr)):\n        if arr[i] > arr[i - 1]:\n            result.append(arr[i])\n    return result"}
{"task_id": 106, "completion_id": 0, "solution": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}
{"task_id": 107, "completion_id": 0, "solution": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    result = []\n    for digit in n:\n        if digit == 0:\n            result.append(digit)\n        else:\n            result.append(digit)\n    return result"}
{"task_id": 108, "completion_id": 0, "solution": ""}
{"task_id": 109, "completion_id": 0, "solution": ""}
{"task_id": 110, "completion_id": 0, "solution": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        if i % 2 == 0:\n            result.append(lst1[i])\n    return result"}
{"task_id": 111, "completion_id": 0, "solution": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    letter_count = {}\n    for letter in s:\n        if letter in letter_count:\n            letter_count[letter] += 1\n    for letter in letter_count:\n        if letter in letter_count:\n            letter_count[letter] += 1\n    return letter_count[letter]"}
{"task_id": 112, "completion_id": 0, "solution": "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            count += 1\n        else:\n            count += 1\n    return count"}
{"task_id": 113, "completion_id": 0, "solution": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        if i == len(lst):\n            result.append(lst[i])\n    return result"}
{"task_id": 114, "completion_id": 0, "solution": ""}
{"task_id": 115, "completion_id": 0, "solution": "def max_fill(grid, capacity):\n    import math\n    '\\n    You are given a rectangular grid of wells. Each row represents a single well,\\n    and each 1 in a row represents a single unit of water.\\n    Each well has a corresponding bucket that can be used to extract water from it, \\n    and all buckets have the same capacity.\\n    Your task is to use the buckets to empty the wells.\\n    Output the number of times you need to lower the buckets.\\n\\n    Example 1:\\n        Input: \\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\\n            bucket_capacity : 1\\n        Output: 6\\n\\n    Example 2:\\n        Input: \\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\\n            bucket_capacity : 2\\n        Output: 5\\n    \\n    Example 3:\\n        Input: \\n            grid : [[0,0,0], [0,0,0]]\\n            bucket_capacity : 5\\n        Output: 0\\n\\n    Constraints:\\n        * all wells have the same length\\n        * 1 <= grid.length <= 10^2\\n        * 1 <= grid[:,1].length <= 10^2\\n        * grid[i][j] -> 0 | 1\\n        * 1 <= capacity <= 10\\n    '\n    max_water = []\n    max_water = []\n    for row in range(len(grid)):\n        if grid[row][col] == 1:\n            water += 1\n        else:\n            water += 1\n    return water"}
{"task_id": 116, "completion_id": 0, "solution": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = []\n    for i in range(len(arr)):\n        if arr[i] > arr[i - 1]:\n            arr.append(arr[i])\n    return arr"}
{"task_id": 117, "completion_id": 0, "solution": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    result = []\n    for word in s:\n        if word not in result:\n            result.append(word)\n        else:\n            result.append(word)\n    return result"}
{"task_id": 118, "completion_id": 0, "solution": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    if not word:\n        return ''\n    (left, right) = (0, len(word) - 1)\n    while left < right:\n        if word[left] == 'I':\n            left += 1\n        elif word[right] == 'I':\n            right -= 1\n        else:\n            left += 1\n    return s.join('')"}
{"task_id": 119, "completion_id": 0, "solution": "def match_parens(lst):\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    \"\"\"\n    if not list:\n        return 0\n    result = []\n    for char in list:\n        if char == '(':\n            result.append(char)\n        else:\n            result.append(char)\n    return result"}
{"task_id": 120, "completion_id": 0, "solution": ""}
{"task_id": 121, "completion_id": 0, "solution": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odd_sum = []\n    for i in range(len(lst)):\n        odd_sum.append(lst[i])\n    for i in range(len(lst)):\n        odd_sum.append(lst[i])\n    return odd_sum"}
{"task_id": 122, "completion_id": 0, "solution": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    result = []\n    result = 0\n    for i in range(len(arr)):\n        result += arr[i]\n        result += arr[i]\n    return result"}
{"task_id": 123, "completion_id": 0, "solution": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    result = []\n    for digit in reversed(range(1, 10)):\n        if digit == 0:\n            result.append(digit)\n    return result"}
{"task_id": 124, "completion_id": 0, "solution": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not is_valid:\n        return False\n    if not is_valid:\n        return True\n    if not is_valid:\n        return False\n    if not is_valid:\n        return False\n    if not is_valid:\n        return False\n    if not is_valid:\n        return False\n    if not is_valid:\n        return False\n    if not is_valid:\n        return False\n    if not is_valid:\n        return False\n    if not is_valid:\n        return True\n    if not is_valid:\n        return False\n    if not is_valid:\n        return False\n    if not is_valid:\n        return False\n    if not is_valid:\n        return True\n    if not is_valid:\n        return False\n    if not is_valid:\n        return False\n    if not is_valid:\n        return False\n    if not is_valid:\n        return False\n    if not is_valid:\n        return False"}
{"task_id": 125, "completion_id": 0, "solution": ""}
{"task_id": 126, "completion_id": 0, "solution": "def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n    if len(lst) == 1:\n        return False\n    if len(lst) == 2:\n        return True\n    if len(lst) == 2:\n        return False\n    if len(lst) == 2:\n        return True\n    if len(lst) == 2:\n        return False\n    if len(lst) == 1:\n        return True\n    if len(lst) == 2:\n        return False\n    if len(lst) == 2:\n        return True\n    if len(lst) == 2:\n        return False\n    if len(lst) == 2:\n        return True\n    if len(lst) == 2:\n        return False\n    if len(lst) == 2:\n        return True\n    if len(lst) == 2:\n        return False\n    if len(lst) == 2:\n        return True\n    if len(lst) == 1:\n        return False\n    if len(lst) == 2:\n        return True\n    if len(lst) == 2:\n        return False\n    if len(lst) == 2:\n        return True\n    if len(lst) == 2:\n        return False\n    if len(lst) == 2:\n        return True\n    if len(lst) == 2:\n        return False\n    if len(lst) == 2:\n        return True\n    if len(lst) == 2:\n        return False\n    if len(lst) == 2:\n        return True\n    if len(lst) == 2:\n        return False\n    if len(lst) == 2:\n        return True\n    if len(lst) == 2:\n        return False"}
{"task_id": 127, "completion_id": 0, "solution": ""}
{"task_id": 128, "completion_id": 0, "solution": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    result = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[i - 1]:\n            result += arr[i]\n        else:\n            result += arr[i]\n    return result"}
{"task_id": 129, "completion_id": 0, "solution": ""}
{"task_id": 130, "completion_id": 0, "solution": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    res = []\n    res = []\n    for i in range(1, n + 1):\n        if i % i == 0:\n            res.append(tri(i))\n    return res"}
{"task_id": 131, "completion_id": 0, "solution": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    digit_num = 1\n    for digit in digits:\n        digit_num += digit\n        digit_num += digit\n    return digit_num"}
{"task_id": 132, "completion_id": 0, "solution": ""}
{"task_id": 133, "completion_id": 0, "solution": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    sum_squares = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            sum_squares.append(i)\n    return sum_squares"}
{"task_id": 134, "completion_id": 0, "solution": "def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    \"\"\"\n    if not is_alphabetical(s):\n        return False\n    if not is_alphabetical(s):\n        return False\n    if not is_alphabetical(s):\n        return False\n    if not is_alphabetical(s):\n        return False\n    if not is_alphabetical(s):\n        return False\n    if not is_alphabetical(s):\n        return False\n    if not is_alphabetical(s):\n        return False\n    if not is_alphabetical(s):\n        return False\n    if not is_alphabetical(s):\n        return False\n    if not is_alphabetical(s):\n        return False\n    if not is_alphabetical(s):\n        return False\n    if not is_alphabetical(s):\n        return False\n    if not is_alphabetical(s):\n        return False\n    if not is_alphabetical(s):\n        return False\n    if not is_alphabetical(s):\n        return False\n    if not is_alphabetical(s):\n        return False\n    if not is_alphabetical(s):\n        return False\n    if not is_alphabetical(s):\n        return False\n    if not is_alphabetical(s):\n        return False\n    if not is_alphabetical(s):\n        return False\n    if not is_alphabetical(s):\n        return False\n    if not is_alphabetical(s):\n        return False\n    if not is_alphabetical(s):\n        return False\n    if not is_alphabetical(s):\n        return False\n    if not is_alphabetical(s):\n        return False\n    if not is_alphabetical(s):\n        return False\n    if not is_alphabetical(s):\n        return False\n    if not is_alphabetical(s):\n        return False"}
{"task_id": 135, "completion_id": 0, "solution": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    result = []\n    for i in range(len(arr)):\n        if arr[i] > arr[i - 1]:\n            result.append(arr[i])\n    return result"}
{"task_id": 136, "completion_id": 0, "solution": "def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    largest_smallest_integers = []\n    for i in range(len(lst)):\n        if i % i == 0:\n            largest_smallest_integers.append(i)\n    if i % i == 0:\n        largest_smallest_integers.append(i)\n    return largest_smallest_integers"}
{"task_id": 137, "completion_id": 0, "solution": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    return (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x)) % (int(x) + int(x))"}
{"task_id": 138, "completion_id": 0, "solution": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return True\n    if n % 2 == 0:\n        return False"}
{"task_id": 139, "completion_id": 0, "solution": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    result = []\n    result = []\n    for digit in range(1, n):\n        if digit in result:\n            result.append(digit)\n    return result"}
{"task_id": 140, "completion_id": 0, "solution": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    stack = []\n    for i in range(len(text)):\n        if text[i] == '1':\n            stack.append(text[i])\n        else:\n            stack.pop()\n    return stack"}
{"task_id": 141, "completion_id": 0, "solution": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    result = 0\n    result = 0\n    for i in range(len(file_name)):\n        if i == len(file_name):\n            result += 1\n        else:\n            result += 1\n    return result"}
{"task_id": 142, "completion_id": 0, "solution": ""}
{"task_id": 143, "completion_id": 0, "solution": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    s = ''\n    for word in sentence:\n        if word == ' ':\n            continue\n        else:\n            s += word\n    return s"}
{"task_id": 144, "completion_id": 0, "solution": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    if n <= 0:\n        return False\n    if n <= 0:\n        return False\n    if n <= 0:\n        return False\n    if n <= 0:\n        return False\n    if n <= 0:\n        return False\n    if n <= 0:\n        return False\n    if n <= 0:\n        return True\n    if n <= 0:\n        return False\n    if n <= 0:\n        return False\n    if n <= 0:\n        return True\n    if n <= 0:\n        return False\n    if n <= 0:\n        return False\n    if n <= 0:\n        return False\n    if n <= 0:\n        return False\n    if n <= 0:\n        return True\n    if n <= 0:\n        return False\n    if n <= 0:\n        return True\n    if n <= 0:\n        return False\n    if n <= 0:\n        return False\n    if n <= 0:\n        return False\n    if n <= 0:\n        return False\n    if n <= 0:\n        return False\n    if n <= 0:\n        return False\n    if n <= 0:\n        return True\n    if n <= 0:\n        return False\n    if n <= 0:\n        return False\n    if n <= 0:\n        return False\n    if n <= 0:\n        return False"}
{"task_id": 145, "completion_id": 0, "solution": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    result = []\n    for i in range(len(nums)):\n        if i > 0:\n            result.append(i)\n        else:\n            result.append(i)\n    return result"}
{"task_id": 146, "completion_id": 0, "solution": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    left = 0\n    right = len(nums) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if nums[mid] < nums[left]:\n            left = mid + 1\n        elif nums[mid] > nums[right]:\n            right = mid\n        elif nums[mid] > nums[right]:\n            left = mid + 1\n        else:\n            right = mid\n    return nums[left]"}
{"task_id": 147, "completion_id": 0, "solution": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    result = []\n    for i in range(1, n):\n        if i % 3 == 0:\n            result.append(i)\n    return result"}
{"task_id": 148, "completion_id": 0, "solution": ""}
{"task_id": 149, "completion_id": 0, "solution": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    result = []\n    result = []\n    for word in words:\n        if word not in result:\n            result.append(word)\n        else:\n            result.append(word)\n    return result"}
{"task_id": 150, "completion_id": 0, "solution": ""}
{"task_id": 151, "completion_id": 0, "solution": "def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(len(lst)):\n        if lst[i] == 0:\n            sum_of_squares += lst[i]\n            sum_of_squares += lst[i]\n            sum_of_squares += sum_of_squares\n    return sum_of_squares"}
{"task_id": 152, "completion_id": 0, "solution": ""}
{"task_id": 153, "completion_id": 0, "solution": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def is_valid_subsequence(self, s: str, t: str) -> bool:\n        if len(s) == 0:\n            return False\n        if len(s) == 0:\n            return True\n        if len(s) == 1:\n            return False\n        if len(s) == 1:\n            return True\n        if len(s) == 1:\n            return False\n        if len(s) == 1:\n            return True\n        if len(s) == 2:\n            return False\n        if len(s) == 2:\n            return True\n        if len(s) == 1:\n            return False\n        if len(s) == 2:\n            return True\n        if len(s) == 2:\n            return False\n        if len(s) == 1:\n            return True\n        if len(s) == 2:\n            return False\n        if len(s) == 2:\n            return True\n        if len(s) == 2:\n            return False\n        if len(s) == 1:\n            return True\n        if len(s) == 2:\n            return False\n        if len(s) == 2:\n            return True\n        if len(s) == 2:\n            return True\n        if len(s) == 3:\n            return False\n        if len(s) == 1:\n            return True\n        if len(s) == 2:\n            return True\n        if len(s) == 3:\n            return False\n        if len(s) == 2:\n            return True\n        if len(s) == 3:\n            return True\n        if len(s) == 1:\n            return False\n        if len(s) == 2:\n            return True\n        if len(s) == 3:\n            return True\n        if len(s) == 2:\n            return False\n        if len(s) == 2:\n            return True\n        if len(s) == 3:\n            return True\n        if len(s) == 1:\n            return False\n        if len(s) == 2:\n            return True\n        if len(s) == 3:\n            return True\n        if len(s) == 2:\n            return False\n        if len(s) == 3:\n            return True\n        if len(s) == 1:\n            return False\n        if len(s) == 2:\n            return True\n        if len(s) == 3:\n            return True\n        if len(s) == 2:\n            return False"}
{"task_id": 154, "completion_id": 0, "solution": ""}
{"task_id": 155, "completion_id": 0, "solution": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    odd_even_count = 0\n    odd_odd_count = 0\n    for i in range(len(even_even_count)):\n        if odd_even_count > even_odd_count:\n            odd_odd_count += 1\n        else:\n            odd_odd_count += 1\n    return odd_odd_count"}
{"task_id": 156, "completion_id": 0, "solution": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    result = []\n    for i in range(len(number)):\n        result.append(number[i])\n    return result"}
{"task_id": 157, "completion_id": 0, "solution": "def right_angle_triangle(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\n    if len(sides) == 0:\n        return True\n    if len(sides) == 0:\n        return True\n    if len(sides) == 0:\n        return True\n    if len(sides) == 0:\n        return False\n    return len(sides) == 0"}
{"task_id": 158, "completion_id": 0, "solution": ""}
{"task_id": 159, "completion_id": 0, "solution": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    count = []\n    for candies in candies:\n        if candies[candies] == 0:\n            count.append(candies[candies])\n    return count"}
{"task_id": 160, "completion_id": 0, "solution": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = []\n    for op in operators:\n        if op == '+':\n            result.append(op)\n        else:\n            result.append(op)\n    return result"}
{"task_id": 161, "completion_id": 0, "solution": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    reversed_string = ''\n    for char in s:\n        if char == '':\n            reversed_string += 1\n        else:\n            reversed_string += 1\n    return reversed_string"}
{"task_id": 162, "completion_id": 0, "solution": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    result = []\n    for char in text:\n        if char == ' ':\n            result.append(char)\n        else:\n            result.append(char)\n    return result"}
{"task_id": 163, "completion_id": 0, "solution": ""}
