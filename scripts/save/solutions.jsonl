{"task_id": 0, "completion_id": 0, "solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": 1, "completion_id": 0, "solution": "from typing import List\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    result = []\n    count = 0\n    start = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            count += 1\n        elif paren_string[i] == ')':\n            count -= 1\n            if count == 0:\n                result.append(paren_string[start:i + 1])\n                start = i + 1\n    return result"}
{"task_id": 2, "completion_id": 0, "solution": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)"}
{"task_id": 3, "completion_id": 0, "solution": "from typing import List\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": 4, "completion_id": 0, "solution": "from typing import List\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum((abs(x - mean) for x in numbers)) / len(numbers)"}
{"task_id": 5, "completion_id": 0, "solution": "from typing import List\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for (i, num) in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": 6, "completion_id": 0, "solution": "from typing import List\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for group in paren_string.split():\n        count = 0\n        max_count = 0\n        for char in group:\n            if char == '(':\n                count += 1\n                if count > max_count:\n                    max_count = count\n            elif char == ')':\n                count -= 1\n        result.append(max_count)\n    return result"}
{"task_id": 7, "completion_id": 0, "solution": "from typing import List\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"}
{"task_id": 8, "completion_id": 0, "solution": "from typing import List, Tuple\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_numbers = sum(numbers)\n    product_numbers = 1\n    for num in numbers:\n        product_numbers *= num\n    return (sum_numbers, product_numbers)"}
{"task_id": 9, "completion_id": 0, "solution": "from typing import List, Tuple\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    max_so_far = numbers[0]\n    result.append(max_so_far)\n    for num in numbers[1:]:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result"}
{"task_id": 10, "completion_id": 0, "solution": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[::-1]"}
{"task_id": 11, "completion_id": 0, "solution": "from typing import List\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    if len(a) != len(b):\n        raise ValueError('Strings a and b must have the same length')\n    result = ''\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result"}
{"task_id": 12, "completion_id": 0, "solution": "from typing import List, Optional\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    else:\n        return max(strings, key=len)"}
{"task_id": 13, "completion_id": 0, "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        (a, b) = (b, a % b)\n    return a"}
{"task_id": 14, "completion_id": 0, "solution": "from typing import List\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[0:i + 1] for i in range(len(string))]"}
{"task_id": 15, "completion_id": 0, "solution": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join((str(i) for i in range(n + 1)))"}
{"task_id": 16, "completion_id": 0, "solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))"}
{"task_id": 17, "completion_id": 0, "solution": "from typing import List\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    result = []\n    for note in notes:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return result"}
{"task_id": 18, "completion_id": 0, "solution": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    \"\"\"\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count"}
{"task_id": 19, "completion_id": 0, "solution": "from typing import List\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \"\"\"\n    num_list = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    words = numbers.split()\n    sorted_words = sorted(words, key=num_list.index)\n    sorted_numbers = ' '.join(sorted_words)\n    return sorted_numbers"}
{"task_id": 20, "completion_id": 0, "solution": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('The list must have at least two elements')\n    min_diff = float('inf')\n    result = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = numbers[j] - numbers[i]\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[j])\n    return result"}
{"task_id": 21, "completion_id": 0, "solution": "from typing import List\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]"}
{"task_id": 22, "completion_id": 0, "solution": "from typing import List, Any\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": 23, "completion_id": 0, "solution": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": 24, "completion_id": 0, "solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": 25, "completion_id": 0, "solution": "from typing import List\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": 26, "completion_id": 0, "solution": "from typing import List\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": 27, "completion_id": 0, "solution": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()"}
{"task_id": 28, "completion_id": 0, "solution": "from typing import List\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": 29, "completion_id": 0, "solution": "from typing import List\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": 30, "completion_id": 0, "solution": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [i for i in l if i > 0]"}
{"task_id": 31, "completion_id": 0, "solution": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    False\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": 32, "completion_id": 0, "solution": "import math\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for (i, coeff) in enumerate(xs)])\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError('The list must have an even number of coefficients')\n    max_coeff = max(filter(lambda x: x != 0, xs), key=abs)\n    solutions = [i for i in range(-100, 100) if poly(xs, i) == max_coeff]\n    return solutions"}
{"task_id": 33, "completion_id": 0, "solution": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    third_elements = [l[i] for i in range(len(l)) if (i + 1) % 3 == 0]\n    third_elements.sort()\n    l_prime = l.copy()\n    for i in range(len(l)):\n        if (i + 1) % 3 == 0:\n            l_prime[i] = third_elements.pop(0)\n    return l_prime"}
{"task_id": 34, "completion_id": 0, "solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))"}
{"task_id": 35, "completion_id": 0, "solution": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)"}
{"task_id": 36, "completion_id": 0, "solution": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": 37, "completion_id": 0, "solution": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    even_indices.sort()\n    l_prime = l.copy()\n    for (i, val) in zip(range(0, len(l), 2), even_indices):\n        l_prime[i] = val\n    return l_prime"}
{"task_id": 38, "completion_id": 0, "solution": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)"}
{"task_id": 39, "completion_id": 0, "solution": "def is_prime(n: int) -> bool:\n    \"\"\"\n    is_prime checks if a number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\ndef fibonacci(n: int) -> int:\n    \"\"\"\n    fibonacci returns the n-th number in the Fibonacci sequence.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        (a, b) = (0, 1)\n        for _ in range(n - 1):\n            (a, b) = (b, a + b)\n        return b\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    i = 0\n    while True:\n        fib_number = fibonacci(i)\n        if is_prime(fib_number):\n            i += 1\n            if i == n:\n                return fib_number\n        i += 1"}
{"task_id": 40, "completion_id": 0, "solution": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    n = len(l)\n    for i in range(0, n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": 41, "completion_id": 0, "solution": "def car_race_collision(n: int):\n    \"\"\"\n    This function calculates the number of collisions between two sets of n cars.\n    \"\"\"\n    return n * (n - 1) // 2"}
{"task_id": 42, "completion_id": 0, "solution": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i + 1 for i in l]"}
{"task_id": 43, "completion_id": 0, "solution": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    if len(l) <= 1:\n        return False\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": 44, "completion_id": 0, "solution": "def change_base(x: int, base: int) -> str:\n    \"\"\"\n    Change numerical base of input number x to base.\n    Return string representation after the conversion.\n    Base numbers are less than 10.\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)"}
{"task_id": 45, "completion_id": 0, "solution": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h"}
{"task_id": 46, "completion_id": 0, "solution": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        fib = [0, 0, 2, 0] + [0] * (n - 3)\n        for i in range(4, n + 1):\n            fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4]\n        return fib[n]"}
{"task_id": 47, "completion_id": 0, "solution": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]"}
{"task_id": 48, "completion_id": 0, "solution": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": 49, "completion_id": 0, "solution": "def modp(n: int, p: int) -> int:\n    \"\"\"\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)"}
{"task_id": 50, "completion_id": 0, "solution": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5) % 26 + ord('a')) for ch in s])"}
{"task_id": 51, "completion_id": 0, "solution": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": 52, "completion_id": 0, "solution": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True"}
{"task_id": 53, "completion_id": 0, "solution": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": 54, "completion_id": 0, "solution": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    return sorted(s0) == sorted(s1)"}
{"task_id": 55, "completion_id": 0, "solution": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        (a, b) = (0, 1)\n        for _ in range(2, n + 1):\n            (a, b) = (b, a + b)\n        return b"}
{"task_id": 56, "completion_id": 0, "solution": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack or stack.pop() != '<':\n                return False\n    return not stack"}
{"task_id": 57, "completion_id": 0, "solution": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    diff = l[1] - l[0]\n    for i in range(2, len(l)):\n        if diff == 0:\n            return True\n        if diff > 0:\n            if l[i] - l[i - 1] < 0:\n                return False\n        elif l[i] - l[i - 1] > 0:\n            return False\n        diff = l[i] - l[i - 1]\n    return True"}
{"task_id": 58, "completion_id": 0, "solution": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_elements = set(l1) & set(l2)\n    return sorted(list(common_elements))"}
{"task_id": 59, "completion_id": 0, "solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": 60, "completion_id": 0, "solution": "def sum_to_n(n: int):\n    \"\"\"\n    sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))"}
{"task_id": 61, "completion_id": 0, "solution": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": 62, "completion_id": 0, "solution": "def derivative(xs: list):\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n    derivative_list = [i * x for (i, x) in enumerate(xs)][1:]\n    return derivative_list"}
{"task_id": 63, "completion_id": 0, "solution": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_list = [0, 0, 1]\n        for i in range(3, n + 1):\n            fibfib_list.append(fibfib_list[-1] + fibfib_list[-2] + fibfib_list[-3])\n        return fibfib_list[-1]"}
{"task_id": 64, "completion_id": 0, "solution": "def vowels_count(s):\n    \"\"\"\n    Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    count = 0\n    vowels = 'aeiou'\n    s = s.lower()\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1] == 'y':\n        count += 1\n    return count"}
{"task_id": 65, "completion_id": 0, "solution": "def circular_shift(x, shift):\n    \"\"\"\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    str_x = str(x)\n    num_digits = len(str_x)\n    if shift >= num_digits:\n        return str_x[::-1]\n    else:\n        return str_x[-shift:] + str_x[:-shift]"}
{"task_id": 66, "completion_id": 0, "solution": "def digitSum(s):\n    return sum((ord(c) for c in s if c.isupper()))"}
{"task_id": 67, "completion_id": 0, "solution": "def fruit_distribution(s, n):\n    parts = s.split()\n    apples = int(parts[0].split(' ')[0])\n    oranges = int(parts[2].split(' ')[0])\n    mango = n - apples - oranges\n    return mango"}
{"task_id": 68, "completion_id": 0, "solution": "def pluck(arr):\n    even_values = [(v, i) for (i, v) in enumerate(arr) if v % 2 == 0]\n    if even_values:\n        smallest_even_value = min(even_values)\n        return [smallest_even_value[0], smallest_even_value[1]]\n    else:\n        return []"}
{"task_id": 69, "completion_id": 0, "solution": "def search(lst):\n    for i in range(1, max(lst) + 1):\n        if lst.count(i) >= i:\n            return i\n    return -1"}
{"task_id": 70, "completion_id": 0, "solution": "def strange_sort_list(lst):\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result"}
{"task_id": 71, "completion_id": 0, "solution": "def triangle_area(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)"}
{"task_id": 72, "completion_id": 0, "solution": "def will_it_fly(q, w):\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": 73, "completion_id": 0, "solution": "def smallest_change(arr):\n    changes = 0\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] != arr[j]:\n            changes += 1\n        i += 1\n        j -= 1\n    return changes"}
{"task_id": 74, "completion_id": 0, "solution": "def total_match(lst1, lst2):\n    total1 = sum((len(i) for i in lst1))\n    total2 = sum((len(i) for i in lst2))\n    if total1 <= total2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": 75, "completion_id": 0, "solution": "def is_multiply_prime(a):\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    factors = []\n    for i in range(2, int(a ** 0.5) + 1):\n        if a % i == 0:\n            if is_prime(i):\n                factors.append(i)\n            if is_prime(a // i):\n                factors.append(a // i)\n    factors = list(set(factors))\n    factors.sort()\n    if len(factors) == 3:\n        return True\n    else:\n        return False"}
{"task_id": 76, "completion_id": 0, "solution": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return round(x ** (1.0 / n)) ** n == x"}
{"task_id": 77, "completion_id": 0, "solution": "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n    import math\n    cube_root = round(a ** (1.0 / 3))\n    return cube_root ** 3 == a"}
{"task_id": 78, "completion_id": 0, "solution": "def hex_key(num):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    count = 0\n    for digit in num:\n        if int(digit, 16) in primes:\n            count += 1\n    return count"}
{"task_id": 79, "completion_id": 0, "solution": "def decimal_to_binary(decimal):\n    binary = bin(decimal).replace('0b', '')\n    binary = 'db' + binary + 'db'\n    return binary"}
{"task_id": 80, "completion_id": 0, "solution": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i + 3])) != 3:\n            return False\n    return True"}
{"task_id": 81, "completion_id": 0, "solution": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": 82, "completion_id": 0, "solution": "def prime_length(string):\n    \"\"\"\n    Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))"}
{"task_id": 83, "completion_id": 0, "solution": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10 ** (n - 1), 10 ** n):\n        str_i = str(i)\n        if str_i[0] == '1' or str_i[-1] == '1':\n            count += 1\n    return count"}
{"task_id": 84, "completion_id": 0, "solution": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary = bin(N)[2:]\n    sum_of_digits = sum((int(digit) for digit in binary))\n    return bin(sum_of_digits)[2:]"}
{"task_id": 85, "completion_id": 0, "solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum((lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0))"}
{"task_id": 86, "completion_id": 0, "solution": "def anti_shuffle(s):\n    words = s.split(' ')\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)"}
{"task_id": 87, "completion_id": 0, "solution": "def get_row(lst, x):\n    result = []\n    for (i, row) in enumerate(lst):\n        for (j, val) in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result"}
{"task_id": 88, "completion_id": 0, "solution": "def sort_array(array):\n    if not array:\n        return []\n    if len(array) == 1:\n        return array\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": 89, "completion_id": 0, "solution": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            if char.isupper():\n                result += chr((ord(char) - 65 + shift) % 26 + 65)\n            else:\n                result += chr((ord(char) - 97 + shift) % 26 + 97)\n        else:\n            result += char\n    return result"}
{"task_id": 90, "completion_id": 0, "solution": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    (min1, min2) = (float('inf'), float('inf'))\n    for x in lst:\n        if x <= min1:\n            (min1, min2) = (x, min1)\n        elif x < min2:\n            min2 = x\n    return min2"}
{"task_id": 91, "completion_id": 0, "solution": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    sentences = S.split('.')\n    sentences = [s.strip() for s in sentences]\n    return sum((1 for s in sentences if s.startswith('I')))"}
{"task_id": 92, "completion_id": 0, "solution": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False"}
{"task_id": 93, "completion_id": 0, "solution": "def encode(message):\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            if char.isupper():\n                encoded_message += chr(ord('A') + (index + 2) % 26)\n            else:\n                encoded_message += chr(ord('a') + (index + 2) % 26)\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": 94, "completion_id": 0, "solution": "def skjkasdkd(lst):\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def sum_of_digits(n):\n        return sum((int(digit) for digit in str(n)))\n    max_prime = max(filter(is_prime, lst))\n    return sum_of_digits(max_prime)"}
{"task_id": 95, "completion_id": 0, "solution": "def check_dict_case(dictionary):\n    if not dictionary:\n        return False\n    keys = dictionary.keys()\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper"}
{"task_id": 96, "completion_id": 0, "solution": "def count_up_to(n):\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    primes = [num for num in range(n) if is_prime(num)]\n    return primes"}
{"task_id": 97, "completion_id": 0, "solution": "def multiply(a, b):\n    \"\"\"\n    Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    a_str = str(a)\n    b_str = str(b)\n    product = 0\n    for digit_a in a_str:\n        for digit_b in b_str:\n            product += int(digit_a) * int(digit_b)\n    return product"}
{"task_id": 98, "completion_id": 0, "solution": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": 99, "completion_id": 0, "solution": "def closest_integer(value):\n    value = float(value)\n    if value >= 0:\n        return int(value) if value - int(value) < 0.5 else int(value) + 1\n    else:\n        return int(value) if abs(value - int(value)) < 0.5 else int(value) - 1"}
{"task_id": 100, "completion_id": 0, "solution": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    for i in range(n - 1):\n        if n % 2 == 0:\n            pile.append(n + 2)\n        else:\n            pile.append(n + 1)\n        n += 1\n    return pile"}
{"task_id": 101, "completion_id": 0, "solution": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.replace(',', '').split()"}
{"task_id": 102, "completion_id": 0, "solution": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        x += 1\n    if y % 2 == 0:\n        y -= 1\n    if x > y:\n        return -1\n    else:\n        return y"}
{"task_id": 103, "completion_id": 0, "solution": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = 0\n    for i in range(n, m + 1):\n        total += i\n    avg = round(total / (m - n + 1))\n    return bin(avg)"}
{"task_id": 104, "completion_id": 0, "solution": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if all((int(d) % 2 != 0 for d in str(i)))])"}
{"task_id": 105, "completion_id": 0, "solution": "def by_length(arr):\n    num_to_name = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    arr = [i for i in arr if 1 <= i <= 9]\n    arr.sort()\n    arr.reverse()\n    arr = [num_to_name[i] for i in arr]\n    return arr"}
{"task_id": 106, "completion_id": 0, "solution": "def f(n):\n\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    def sum_of_numbers(n):\n        return n * (n + 1) // 2\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result"}
{"task_id": 107, "completion_id": 0, "solution": "def even_odd_palindrome(n):\n\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": 108, "completion_id": 0, "solution": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num >= 0:\n            count += sum((int(digit) for digit in str(num))) > 0\n    return count"}
{"task_id": 109, "completion_id": 0, "solution": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr.insert(0, arr.pop())\n    return False"}
{"task_id": 110, "completion_id": 0, "solution": "def exchange(lst1, lst2):\n    \"\"\"\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    odd_count1 = sum((1 for num in lst1 if num % 2 != 0))\n    even_count2 = sum((1 for num in lst2 if num % 2 == 0))\n    if odd_count1 > even_count2:\n        return 'NO'\n    else:\n        return 'YES'"}
{"task_id": 111, "completion_id": 0, "solution": "def histogram(test):\n    words = test.split()\n    hist = {}\n    for word in words:\n        if word in hist:\n            hist[word] += 1\n        else:\n            hist[word] = 1\n    common_words = [word for (word, count) in hist.items() if count > 1]\n    return {word: max(hist, key=hist.get) for word in common_words}"}
{"task_id": 112, "completion_id": 0, "solution": "def reverse_delete(s, c):\n    s = ''.join([i for i in s if i not in c])\n    is_palindrome = s == s[::-1]\n    return (s, is_palindrome)"}
{"task_id": 113, "completion_id": 0, "solution": "def odd_count(lst):\n    result = []\n    for (i, s) in enumerate(lst):\n        odd_count = sum((1 for c in s if int(c) % 2 != 0))\n        result.append('the number of odd elements {}n the str{}ng {} of the {}nput.'.format(odd_count, i + 1, odd_count, i + 1))\n    return result"}
{"task_id": 114, "completion_id": 0, "solution": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    cur_sum = 0\n    for num in nums:\n        cur_sum += num\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n        if cur_sum > 0:\n            cur_sum = 0\n    return min_sum"}
{"task_id": 115, "completion_id": 0, "solution": "def max_fill(grid, capacity):\n    import math\n    count = 0\n    for row in grid:\n        for cell in row:\n            if cell == 1:\n                count += math.ceil(cell / capacity)\n    return count"}
{"task_id": 116, "completion_id": 0, "solution": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": 117, "completion_id": 0, "solution": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    vowels = 'aeiouAEIOU'\n    result = []\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter.isalpha() and letter not in vowels:\n                count += 1\n        if count == n:\n            result.append(word)\n    return result"}
{"task_id": 118, "completion_id": 0, "solution": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i - 1] not in vowels and (word[i + 1] not in vowels):\n            return word[i]\n    return ''"}
{"task_id": 119, "completion_id": 0, "solution": "def match_parens(lst):\n    s = ''.join(lst)\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": 120, "completion_id": 0, "solution": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]"}
{"task_id": 121, "completion_id": 0, "solution": "def solution(lst):\n    return sum((lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0))"}
{"task_id": 122, "completion_id": 0, "solution": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    filtered_arr = [num for num in arr[:k] if all((int(digit) <= 2 for digit in str(num)))]\n    return sum(filtered_arr)\narr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\nk = 4"}
{"task_id": 123, "completion_id": 0, "solution": "def get_odd_collatz(n):\n\n    def collatz(n):\n        sequence = [n]\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n            sequence.append(n)\n        return sequence\n    sequence = collatz(n)\n    return sorted([num for num in sequence if num % 2 != 0])"}
{"task_id": 124, "completion_id": 0, "solution": "import re\ndef valid_date(date):\n    if not date:\n        return False\n    if not re.match('\\\\d{2}-\\\\d{2}-\\\\d{4}', date):\n        return False\n    (month, day, year) = map(int, date.split('-'))\n    if not 1 <= month <= 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and (not 1 <= day <= 31):\n        return False\n    if month in [4, 6, 9, 11] and (not 1 <= day <= 30):\n        return False\n    if month == 2 and (not 1 <= day <= 29):\n        return False\n    return True"}
{"task_id": 125, "completion_id": 0, "solution": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum((1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 == 1))"}
{"task_id": 126, "completion_id": 0, "solution": "def is_sorted(lst):\n    if len(lst) == len(set(lst)):\n        return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))\n    else:\n        return False"}
{"task_id": 127, "completion_id": 0, "solution": "def intersection(interval1, interval2):\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return 'NO'\n    return 'YES' if is_prime(end - start + 1) else 'NO'"}
{"task_id": 128, "completion_id": 0, "solution": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= num\n    return abs(product)"}
{"task_id": 129, "completion_id": 0, "solution": "def minPath(grid, k):\n    n = len(grid)\n    visited = [[False] * n for _ in range(n)]\n    path = []\n    min_path = []\n\n    def dfs(i, j, k):\n        if k == 0:\n            nonlocal min_path\n            if len(path) < len(min_path):\n                min_path = path[:]\n            return\n        visited[i][j] = True\n        path.append(grid[i][j])\n        for (x, y) in [(i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)]:\n            if 0 <= x < n and 0 <= y < n and (not visited[x][y]):\n                dfs(x, y, k - 1)\n        visited[i][j] = False\n        path.pop()\n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, k)\n    return min_path"}
{"task_id": 130, "completion_id": 0, "solution": "def tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 3]\n    elif n == 2:\n        return [3, 3, 2]\n    else:\n        sequence = [3, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i / 2)\n            else:\n                sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3])\n        return sequence"}
{"task_id": 131, "completion_id": 0, "solution": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product if product != 1 else 0"}
{"task_id": 132, "completion_id": 0, "solution": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack[-1] != '[':\n                return False\n            elif stack and stack[-1] == '[':\n                stack.pop()\n    return not stack"}
{"task_id": 133, "completion_id": 0, "solution": "def sum_squares(lst):\n    return sum((int(round(i)) ** 2 for i in lst))"}
{"task_id": 134, "completion_id": 0, "solution": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and (not last_char.isalpha()):\n        return False\n    return True"}
{"task_id": 135, "completion_id": 0, "solution": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            for j in range(i - 1, -1, -1):\n                if arr[j] <= arr[i]:\n                    return i\n    return -1"}
{"task_id": 136, "completion_id": 0, "solution": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        elif num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n    return (largest_negative, smallest_positive)"}
{"task_id": 137, "completion_id": 0, "solution": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) != type(b):\n        if type(a) == int or type(a) == float:\n            if type(b) == str:\n                b = float(b.replace(',', '.'))\n            else:\n                b = float(b)\n        elif type(a) == str:\n            a = float(a.replace(',', '.'))\n        else:\n            a = float(a)\n    return max(a, b)"}
{"task_id": 138, "completion_id": 0, "solution": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    if n % 2 != 0:\n        return False\n    count = 0\n    for i in range(2, n, 2):\n        if n - i == 0:\n            count += 1\n        elif n - i == 2:\n            count += 2\n        elif n - i == 4:\n            count += 3\n        else:\n            return False\n    return count == 4"}
{"task_id": 139, "completion_id": 0, "solution": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        fact = 1\n        for i in range(1, n + 1):\n            fact *= i\n        return fact"}
{"task_id": 140, "completion_id": 0, "solution": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    return text.replace(' ', '_').replace('    ', '-').replace('   ', '-')"}
{"task_id": 141, "completion_id": 0, "solution": "def file_name_check(file_name):\n    import re\n    if len(file_name) > 3 and file_name.count('.') == 1 and re.match('^[a-zA-Z][a-zA-Z0-9]*$', file_name.split('.')[0]) and (file_name.split('.')[1] in ['txt', 'exe', 'dll']):\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": 142, "completion_id": 0, "solution": "def sum_squares(lst):\n    return sum((x ** 3 if i % 3 == 0 else x ** 2 for (i, x) in enumerate(lst)))"}
{"task_id": 143, "completion_id": 0, "solution": "def words_in_sentence(sentence):\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": 144, "completion_id": 0, "solution": "def simplify(x, n):\n    (x_num, x_den) = map(int, x.split('/'))\n    (n_num, n_den) = map(int, n.split('/'))\n    gcd = x_num if x_num > n_num else n_num\n    while gcd > 1:\n        if x_num % gcd == 0 and n_num % gcd == 0:\n            x_num /= gcd\n            n_num /= gcd\n            gcd = x_num if x_num > n_num else n_num\n        else:\n            gcd -= 1\n    return x_num == int(x_num) and n_num == int(n_num)"}
{"task_id": 145, "completion_id": 0, "solution": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sum_of_digits(n):\n        return sum((int(digit) for digit in str(n)))\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))"}
{"task_id": 146, "completion_id": 0, "solution": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in '13579' and (str(num)[-1] in '13579'):\n            count += 1\n    return count"}
{"task_id": 147, "completion_id": 0, "solution": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": 148, "completion_id": 0, "solution": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    if planet1_index < planet2_index:\n        return tuple(planets[planet1_index + 1:planet2_index])\n    elif planet1_index > planet2_index:\n        return tuple(planets[planet2_index + 1:planet1_index])\n    else:\n        return ()"}
{"task_id": 149, "completion_id": 0, "solution": "def sorted_list_sum(lst):\n    lst = [i for i in lst if len(i) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst"}
{"task_id": 150, "completion_id": 0, "solution": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": 151, "completion_id": 0, "solution": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            sum_of_squares += num ** 2\n    return sum_of_squares"}
{"task_id": 152, "completion_id": 0, "solution": "def compare(game, guess):\n    return [abs(i - j) for (i, j) in zip(game, guess)]"}
{"task_id": 153, "completion_id": 0, "solution": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = extensions[0]\n    strongest_strength = calculate_strength(extensions[0])\n    for extension in extensions[1:]:\n        strength = calculate_strength(extension)\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n    return f'{class_name}.{strongest_extension}'\ndef calculate_strength(extension):\n    uppercase_letters = [char for char in extension if char.isupper()]\n    lowercase_letters = [char for char in extension if char.islower()]\n    return len(uppercase_letters) - len(lowercase_letters)"}
{"task_id": 154, "completion_id": 0, "solution": "def cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word.\n    \"\"\"\n\n    def is_substring(s1, s2):\n        return s1.find(s2) != -1\n    if is_substring(a, b):\n        return True\n    for i in range(1, len(b)):\n        if is_substring(a, b[i:] + b[:i]):\n            return True\n    for i in range(2, len(b)):\n        if is_substring(a, b[i:] + b[:i]):\n            return True\n    return False"}
{"task_id": 155, "completion_id": 0, "solution": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": 156, "completion_id": 0, "solution": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not 1 <= number <= 1000:\n        raise ValueError('Input must be between 1 and 1000')\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syb = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num"}
{"task_id": 157, "completion_id": 0, "solution": "def right_angle_triangle(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    if a == b or b == c or a == c:\n        return False\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    return True"}
{"task_id": 158, "completion_id": 0, "solution": "def find_max(words):\n    max_unique_chars = 0\n    max_word = None\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word"}
{"task_id": 159, "completion_id": 0, "solution": "def eat(number, need, remaining):\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]"}
{"task_id": 160, "completion_id": 0, "solution": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result\noperator = ['+', '*', '-']\noperand = [2, 3, 4, 5]"}
{"task_id": 161, "completion_id": 0, "solution": "def solve(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char[::-1]\n    return result"}
{"task_id": 162, "completion_id": 0, "solution": "import hashlib\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == '':\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": 163, "completion_id": 0, "solution": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    a_str = str(a)\n    b_str = str(b)\n    min_num = min(a, b)\n    max_num = max(a, b)\n    even_nums = [int(i) for i in a_str if int(i) % 2 == 0] + [int(i) for i in b_str if int(i) % 2 == 0]\n    even_nums = [i for i in even_nums if i >= min_num and i <= max_num]\n    even_nums.sort()\n    return even_nums"}
